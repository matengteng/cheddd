package com.cheddd.activity;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.Poi;
import com.cheddd.R;
import com.cheddd.application.MyApplications;
import com.cheddd.base.MyBaseActivity;
import com.cheddd.bean.InfoPhoneBean;
import com.cheddd.config.NetConfig;
import com.cheddd.fragment.NetProgressDialog;
import com.cheddd.utils.LoginTokenUtils;
import com.cheddd.utils.OkhttpUtils;
import com.cheddd.utils.ToastUtil;
import com.cheddd.view.TopNavigationBar;
import com.google.gson.Gson;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.List;

import okhttp3.FormBody;
import okhttp3.Request;

/*
手机认证
*/
public class PhoneApproveActivity extends MyBaseActivity implements View.OnClickListener, TextWatcher, CompoundButton.OnCheckedChangeListener {

    private static String TAG = PhoneApproveActivity.class.getSimpleName();
    private TopNavigationBar mTnb;
    private EditText mEditTextPhone, mEditTextPassword;//手机号码，服务密码
    private RelativeLayout mRelativeAddress, mRelativeLocation, mRelativeDuanxin;//通讯录，位置，短信
    private CheckBox mCheckBoxAgree; //是否同意
    private TextView mTextViewPassword;//忘记密码
    private Button mButtonSubmit;
    private TextView mTextViewMotion;
    private SharedPreferences mSpf;

    private LocationClient mLocationClient = null;
    private BDLocationListener myListener = new MyLocationListener();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_phone_approve);
        initView();
        initData();
        setListener();

    }


    private void initData() {
        final String json = LoginTokenUtils.getJson();
        Log.d(TAG, json);
        final FormBody formbody = new FormBody.Builder().add("content", json).build();
        OkhttpUtils.getInstance(this).asyncPost(NetConfig.INFO_PHONE_INFO, formbody, new OkhttpUtils.HttpCallBack() {
            @Override
            public void onError(Request request, IOException e) {

            }

            @Override
            public void onSuccess(Request request, String result) {
                // Log.d(TAG, NetConfig.INFO_PHONE_INFO + "content" + "=" + json);
                if (result != null) {
                    try {
                        Log.d(TAG, "请求手机认证：" + result);
                        JSONObject object = new JSONObject(result);
                        String phoneAuth = object.getString("phoneAuth");
                        JSONObject entity = object.getJSONObject("entity");
                        String telNo = entity.getString("telNo");
                        String spPassword = entity.getString("spPassword");
                        mEditTextPassword.setText(spPassword);
                        mEditTextPhone.setText(telNo);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void setListener() {
        mEditTextPhone.addTextChangedListener(this);
        mEditTextPhone.setInputType(InputType.TYPE_CLASS_NUMBER);
        mEditTextPassword.addTextChangedListener(this);
        mEditTextPassword.setInputType(InputType.TYPE_CLASS_DATETIME);
        mCheckBoxAgree.addTextChangedListener(this);
        mRelativeLocation.setOnClickListener(this);
        mRelativeDuanxin.setOnClickListener(this);
        mRelativeAddress.setOnClickListener(this);
        mButtonSubmit.setOnClickListener(this);
        mTextViewMotion.setOnClickListener(this);
        mCheckBoxAgree.setOnCheckedChangeListener(this);
        mTnb.setOnBackListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (v != null) {
                    finish();
                }
            }
        });
    }

    private void initLocation() {

        //声明LocationClient类
        mLocationClient = new LocationClient(getApplicationContext());
        //注册监听函数
        mLocationClient.registerLocationListener(myListener);

        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy);
        //可选，默认高精度，设置定位模式，高精度，低功耗，仅设备

        option.setCoorType("bd09ll");
        //可选，默认gcj02，设置返回的定位结果坐标系

        int span = 10000;
        option.setScanSpan(span);
        //可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的

        option.setIsNeedAddress(true);
        //可选，设置是否需要地址信息，默认不需要

        option.setOpenGps(true);
        //可选，默认false,设置是否使用gps

        option.setLocationNotify(true);
        //可选，默认false，设置是否当GPS有效时按照1S/1次频率输出GPS结果

        option.setIsNeedLocationDescribe(true);
        //可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”

        option.setIsNeedLocationPoiList(true);
        //可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到

        option.setIgnoreKillProcess(false);
        //可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死

        option.SetIgnoreCacheException(false);
        //可选，默认false，设置是否收集CRASH信息，默认收集

        option.setEnableSimulateGps(false);
        //可选，默认false，设置是否需要过滤GPS仿真结果，默认需要

        mLocationClient.setLocOption(option);


        mLocationClient.start();
    }

    private void motain() {
        Intent intent = new Intent(PhoneApproveActivity.this, MotionActivity.class);
        intent.putExtra("url", "http://baidu.com");
        startActivity(intent);
        finish();
    }

    private void initView() {

        mTnb = (TopNavigationBar) findViewById(R.id.tnb_phoneApprove);
        mEditTextPhone = (EditText) findViewById(R.id.et_phoneApprove_phone);
        mEditTextPassword = (EditText) findViewById(R.id.et_phoneApprove_password);
        mRelativeAddress = (RelativeLayout) findViewById(R.id.rl_phoneApprove_address);
        mRelativeDuanxin = (RelativeLayout) findViewById(R.id.rl_phoneApprove_duanxin);
        mRelativeLocation = (RelativeLayout) findViewById(R.id.rl_phoneApprove_location);
        mCheckBoxAgree = (CheckBox) findViewById(R.id.cb_phone_apporve);
        mButtonSubmit = (Button) findViewById(R.id.bt_phoneApprove_submit);
        mTextViewMotion = (TextView) findViewById(R.id.tv_phoneApprove_motain);
    }

    @Override
    public void onClick(View v) {
        if (v != null) {
            switch (v.getId()) {
                case R.id.rl_phoneApprove_location:
                    Log.d(TAG, "位置授权");
                    initLocation();
                    break;
                case R.id.rl_phoneApprove_duanxin:
                    break;
                case R.id.rl_phoneApprove_address:
                    break;
                case R.id.bt_phoneApprove_submit:
                    phone();
                    break;
                case R.id.tv_phoneApprove_motain:
                    mSpf = getSharedPreferences("PhoneApproveActivity", MODE_PRIVATE);
                    boolean config = mSpf.getBoolean("config", true);
                    if (config) {
                        mCheckBoxAgree.setChecked(true);
                        motain();
                    } else {
                        mCheckBoxAgree.setChecked(false);
                        ToastUtil.show(this, "请勾选");
                    }
                    break;
            }
        }
    }

    private void serverPassword() {

        ToastUtil.show(this, "服务密码是啥啊");
    }

    //点击提交
    private void phone() {
        if (!mEditTextPhone.getText().toString().trim().matches("1\\d{10}")) {
            ToastUtil.show(this, "手机格式错误");
            return;
        }
        if (!mEditTextPassword.getText().toString().trim().matches("^[A-Za-z0-9]+$")) {
            ToastUtil.show(this, "服务密码错误");
        }
        InfoPhoneBean phoneBean = new InfoPhoneBean();
        String token = MyApplications.getToken();
        phoneBean.setClientType("2");
        phoneBean.setToken(token);
        phoneBean.setTelNo(mEditTextPhone.getText().toString().trim());
        phoneBean.setSpPassword(mEditTextPassword.getText().toString().trim());
        Gson gson = new Gson();
        String json = gson.toJson(phoneBean);
        Log.d(TAG, json);
        FormBody formBody = new FormBody.Builder().add("content", json).build();
        OkhttpUtils.getInstance(this).asyncPost(NetConfig.INFO_PHONE, formBody, new OkhttpUtils.HttpCallBack() {
            @Override
            public void onError(Request request, IOException e) {

            }

            @Override
            public void onSuccess(Request request, String result) {
                if (result != null) {
                    Log.d(TAG, "result:" + result);
                    try {
                        JSONObject object = new JSONObject(result);
                        String returnCode = object.getString("returnCode");
                        String returnMsg = object.getString("returnMsg");
                        if ("000000".equals(returnCode)) {
                            ToastUtil.show(PhoneApproveActivity.this, returnMsg);
                            finish();
                        }
                        if ("0017".equals(returnCode)) {
                            ToastUtil.show(PhoneApproveActivity.this, returnMsg);
                            startActivity(new Intent(PhoneApproveActivity.this, LoginActivity.class));
                            finish();
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }
            }
        });

    }

    //EditTextView的点击事件
    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

    }

    //EditTextView的点击事件
    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        if (mEditTextPhone.getText().toString().trim().length() == 11) {
            mEditTextPassword.requestFocus();
        }

    }

    //EditTextView的点击事件
    @Override
    public void afterTextChanged(Editable s) {
        if (mEditTextPhone.getText().toString().length() == 11) {
            if (mEditTextPassword.getText().toString().length() > 2) {
                mButtonSubmit.setEnabled(true);
            } else {
                mButtonSubmit.setEnabled(false);
            }
        } else {
            mButtonSubmit.setEnabled(false);
        }

    }

    //checkbox的点击事件
    @Override
    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        if (isChecked) {
            if (mEditTextPhone.getText().toString().length() == 11) {
                if (mEditTextPassword.getText().toString().length() > 2) {
                    mButtonSubmit.setEnabled(true);
                }
            }
            mButtonSubmit.setClickable(isChecked);
            mTextViewMotion.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    motain();
                }
            });
        } else {
            mButtonSubmit.setEnabled(false);
        }
    }

    private class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {

            if (location.getLocType() == BDLocation.TypeNetWorkLocation) {

                String addr = location.getAddrStr(); //获取地址信息

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        findViewById(R.id.bt_phoneApprove_location).setEnabled(true);

                    }
                });

            }

            mLocationClient.unRegisterLocationListener(myListener);
        }

        @Override
        public void onConnectHotSpotMessage(String s, int i) {

        }
    }
}
